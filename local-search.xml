<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GloVe论文笔记</title>
    <link href="/glove_paper_notes/"/>
    <url>/glove_paper_notes/</url>
    
    <content type="html"><![CDATA[<p>关于 EMNLP'14 论文《GloVe: <strong>Glo</strong>bal <strong>Ve</strong>ctors for Word Representation》的阅读笔记 <span id="more"></span></p><h2 id="glove-介绍">GloVe 介绍</h2><p>GloVe 来源于论文《<a href="https://aclanthology.org/D14-1162/">GloVe: <strong>Glo</strong>bal <strong>Ve</strong>ctors for Word Representation</a>》，由 Stanford 的 Jeffrey Pennington 发表在 EMNLP 2014 上。GloVe 研究的任务是把自然语言单词转换为计算机易于处理的表示形式，比如一维向量。GloVe 其实就是全局向量的意思，它是一个词向量模型，并且利用了统计好的全局信息，其类似的方法包括 one-hot、Word2Vec( CBOW &amp; Skip-Gram )等。</p><h2 id="glove-研究动机">GloVe 研究动机</h2><ul><li>传统的基于全局统计的方法，比如 SVD，不能迭代训练，性能不高</li><li>基于深度学习和上下文窗口的方法，比如 Word2Vec，只对小窗口内的上下文建模，忽略了全局信息</li><li>GloVe，想利用全局统计信息，并且可以训练（以机器学习方式，没有使用神经网络）</li></ul><h2 id="glove-引入如何表示两个词的相似性">GloVe 引入：如何表示两个词的相似性</h2><h3 id="词向量的相似性计算">词向量的相似性计算</h3><p>如果我们得到了词向量，可以用向量的距离度量判断两个词是否相似(余弦距离/曼哈顿距离/欧式距离)</p><h3 id="共现矩阵">共现矩阵</h3><p>如何基于全局统计信息来度量两个单词是否相似？</p><ul><li>GloVe 首先统计出共现矩阵 <span class="math inline">\(X_{ij}\)</span>，表示单词 <span class="math inline">\(j\)</span> 在单词 <span class="math inline">\(i\)</span> 附近(比如5个词内)出现的次数</li><li>共现矩阵 <span class="math inline">\(X\)</span> 每一行的和 <span class="math inline">\(X_{i}\)</span> 表示整个语料库一共有多少单词出现在单词 <span class="math inline">\(i\)</span> 附近</li><li>共现概率 <span class="math inline">\(P_{ij}=P(j|i)=\frac{X_{ij}}{X_{i}}\)</span> 表示单词 <span class="math inline">\(j\)</span> 出现在单词 <span class="math inline">\(i\)</span> 附近的概率</li></ul><figure><img src="/figures/glove_paper_notes/co-occurrence-matrix.png" style="width:80%" class="center"><figcaption>根据语料库统计出共现矩阵</figcaption></figure><p>从上面的图可以看出，<span class="math inline">\(X_{I,like}=2\)</span>，<span class="math inline">\(X_{I}=3\)</span>，<span class="math inline">\(P_{I,like}=2/3\)</span></p><p>我们注意到在共现矩阵中 <span class="math inline">\(X_{ij}=X_{ji}\)</span>（即 <span class="math inline">\(X=X^T\)</span>），也就是中心词 <span class="math inline">\(i\)</span> 和背景词 <span class="math inline">\(j\)</span> 的角色可以任意互换</p><h3 id="利用共现矩阵表示两个单词的相似性">利用共现矩阵表示两个单词的相似性</h3><figure><img src="/figures/glove_paper_notes/glove_example.png" style="width:80%" class="center"><figcaption>共现概率比</figcaption></figure><ul><li>已知单词 <span class="math inline">\(i\)</span> 和单词 <span class="math inline">\(j\)</span>，现在有一个单词 <span class="math inline">\(k\)</span>，如何判断单词 <span class="math inline">\(k\)</span> 距离单词i近，还是单词 <span class="math inline">\(j\)</span> 近？</li><li>可以用共现概率的比值来确定：<span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span></li><li>比值大于1表明 <span class="math inline">\(k\)</span> 与 <span class="math inline">\(i\)</span> 近；比值小于1表明 <span class="math inline">\(k\)</span> 与 <span class="math inline">\(j\)</span> 近；比值等于1说明和 <span class="math inline">\(i\)</span>、<span class="math inline">\(j\)</span> 距离相似(都比较接近或都没什么关系)</li></ul><h2 id="glove-建模构建模型">GloVe 建模：构建模型</h2><p>因为 <span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span> 可以表示 <span class="math inline">\(k\)</span> 与 <span class="math inline">\(i\)</span> 和 <span class="math inline">\(j\)</span> 之间的相似度关系，所以想办法构建函数 <span class="math inline">\(F\)</span>，使得对于表示单词 <span class="math inline">\(i\)</span>、<span class="math inline">\(j\)</span>、<span class="math inline">\(k\)</span> 的向量 <span class="math inline">\(w_i\)</span>、<span class="math inline">\(w_j\)</span>、<span class="math inline">\(\tilde{w}_k\)</span> 与 <span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span> 建立联系</p><p><span class="math display">\[F(w_i,w_j,\tilde{w}_k)=\frac{P_{ik}}{P_{jk}}\]</span></p><p><span class="math inline">\(w\)</span> 表示中心词，<span class="math inline">\(\tilde{w}\)</span> 表示背景词</p><p>通过以下假设与限制，从抽象的 <span class="math inline">\(F\)</span> 设计出一个具体的 <span class="math inline">\(F\)</span> 函数</p><ul><li><span class="math inline">\(F\)</span> 表达的含义和形式应该和 <span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span> 一致</li><li>中心词 <span class="math inline">\(i\)</span> 可以是任意的，<span class="math inline">\(i\)</span> 和 <span class="math inline">\(k\)</span> 的角色互换，公式表达的含义不变</li></ul><p><strong>GloVe 模型不是推导出来的，是作者的一种设计！</strong></p><ol type="1"><li><span class="math inline">\(F\)</span> 表达的意义和形式应该和<span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span>一致<ul><li><span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span> 表示单词之间的距离度量，这可以用向量之差表示</li><li><span class="math inline">\(\frac{P_{ik}}{P_{jk}}\)</span> 是标量，可以用向量内积来进行转换</li></ul></li></ol><p><span class="math display">\[    F \left((w_i-w_j)^{T}\tilde{w}_k \right)=\frac{P_{ik}}{P_{jk}} \tag{1} \label{eq1}\]</span></p><p>直观上可以用余弦相似度简单理解这么设计的合理之处</p><ol start="2" type="1"><li>中心词 <span class="math inline">\(i\)</span> 可以是任意的，<span class="math inline">\(i\)</span> 和 <span class="math inline">\(k\)</span> 的角色互换( <span class="math inline">\(w\)</span> 和 <span class="math inline">\(\tilde{w}\)</span>、共现矩阵 <span class="math inline">\(X\)</span> 和 <span class="math inline">\(X^T\)</span> )，公式表达的含义不变，这需要如下一系列设计</li></ol><p>首先公式 <span class="math inline">\(\ref{eq1}\)</span> 肯定不满足上述要求，交换 <span class="math inline">\(i\)</span> 和 <span class="math inline">\(k\)</span>，无论公式的左边和右边都和原来不想等。我们通过观察可以发现主要是 <span class="math inline">\(j\)</span> 的存在让公式无法满足这种对称性，我们可以先办法把 <span class="math inline">\(j\)</span> 去掉，作者进行了如下构造</p><p><span class="math display">\[    F \left((w_i-w_j)^{T}\tilde{w}_k \right)=F (w_i^{T}\tilde{w}_k-w_j^{T}\tilde{w}_k)=\frac{F(w_i^{T}\tilde{w}_k)}{F(w_j^{T}\tilde{w}_k)}=\frac{P_{ik}}{P_{jk}} \tag{2}\label{eq2}\]</span></p><p>指数函数满足 <span class="math inline">\(F\)</span> 的性质，不妨假设 <span class="math inline">\(F\)</span> 为指数函数，即 <span class="math inline">\(F(x)=e^x\)</span>，由公式 <span class="math inline">\(\ref{eq2}\)</span>，可以得到</p><p><span class="math display">\[F(w_i^{T}\tilde{w}_k)=e^{w_i^{T}\tilde{w}_k}=P_{ik}=\frac{X_{ik}}{X_i} \tag{3}\]</span></p><p>所以</p><p><span class="math display">\[    w_i^{T}\tilde{w}_k=\log \left (\frac{X_{ik}}{X_i}\right )=\log (X_{ik}) - \log (X_i) \tag{4}\]</span></p><p>此时有</p><p><span class="math display">\[w_i^{T}\tilde{w}_k +\log (X_i) =\log (X_{ik}) \tag{5}\]</span></p><p><span class="math inline">\(\log (X_i)\)</span> 与 <span class="math inline">\(k\)</span> 无关，我们可以用 <span class="math inline">\(b_i\)</span> 来拟合它</p><p><span class="math display">\[w_i^{T}\tilde{w}_k + b_i =\log (X_{ik}) \tag{6}\]</span></p><p>此时公式左侧再加上 <span class="math inline">\(\tilde{b}_k\)</span>，就可以满足这种对称性( <span class="math inline">\(i\)</span> 和 <span class="math inline">\(k\)</span> 互换，公式的左边和右边都和原来相等！)</p><p><span class="math display">\[w_i^{T}\tilde{w}_k + b_i + \tilde{b}_k =\log (X_{ik}) \tag{7} \label{7}\]</span></p><p>注意向量内积是满足交换律的，即 <span class="math inline">\(w_i^{T}\tilde{w}_k=w_k^{T}\tilde{w}_i\)</span>，并且有 <span class="math inline">\(X_{ik}=X_{ki}\)</span>（由<a href="#共现矩阵">共现矩阵的性质</a>）</p><p>这时我们就构建好了模型，用 <span class="math inline">\(w_i^{T}\tilde{w}_k + b_i + \tilde{b}_k\)</span> 来拟合 $(X_{ik}) $（已知量），即全局对数双线性回归模型</p><p>我们可以得到两组词向量 <span class="math inline">\(w\)</span> 和 <span class="math inline">\(\tilde{w}\)</span>，它们应该是等价的，作者把 <span class="math inline">\(w+\tilde{w}\)</span> 作为 GloVe 最终的词向量</p><h2 id="glove-损失函数">GloVe 损失函数</h2><p>GloVe 使用均方差损失函数，即 <span class="math display">\[J=\sum\limits_{i,j=1}^{V}(w_i^{T}\tilde{w}_k + b_i + \tilde{b}_k-\log (X_{ik}))^2\]</span></p><p>考虑到共现次数少的词对携带信息量少，并且共现次数为0时 <span class="math inline">\(\mathrm{log()}\)</span> 无法计算。在损失函数中添加一个关于共现次数 <span class="math inline">\(X_{ij}\)</span> 的权重函数 <span class="math inline">\(f(X_{ij})\)</span>，损失函数变为</p><p><span class="math display">\[J=\sum\limits_{i,j=1}^{V}f(X_{ij})(w_i^{T}\tilde{w}_j + b_i + \tilde{b}_j-\log (X_{ij}))^2\]</span></p><p>这里把 <span class="math inline">\(k\)</span> 变成 <span class="math inline">\(j\)</span>，是为了和原文一致，公式表达的意思都是一样的</p><p><span class="math inline">\(f(X_{ij})\)</span> 应满足如下性质</p><ul><li><span class="math inline">\(f(0)=0\)</span></li><li><span class="math inline">\(f\)</span> 是非减函数，即共现次数越多权重越大（或不变）</li><li>对共现次数特别大的词对，<span class="math inline">\(f\)</span> 不是特别大</li></ul><p>作者最终选择如下的 <span class="math inline">\(f\)</span></p><p><span class="math display">\[f(x)=\left\{\begin{aligned}&amp; (x/x_{\max})^\alpha \quad \mathrm{if} \;\, x&lt; x_{\max} \\&amp; 1 \quad \mathrm{otherwise} \quad \mathrm{.}\end{aligned}\right.\]</span></p><p>其中 <span class="math inline">\(x_{\max}\)</span> 是设置的共现次数的阈值，作者根据语料库统计设置为 100，<span class="math inline">\(\alpha\)</span> 是超参数，作者根据实验效果设置为 0.75</p><figure><img src="/figures/glove_paper_notes/glove_weight_f.png" style="width:50%" class="center"><figcaption>权重函数 <span class="math inline">\(f\)</span> 的图像</figcaption></figure><h2 id="glove-实验结果">GloVe 实验结果</h2><h3 id="单词类比">单词类比</h3><figure><img src="/figures/glove_paper_notes/word_analogies.png" style="width:50%" class="center"><figcaption>GloVe 在单词类比任务上的表现</figcaption></figure><ul><li>单词类比：爸爸和妈妈类比儿子和<u>女儿</u></li><li>Dim：词向量的维度；Size：语料库大小，6B 表示有6 billion tokens</li></ul><h3 id="单词相似度">单词相似度</h3><figure><img src="/figures/glove_paper_notes/word_similarity.png" style="width:50%" class="center"><figcaption>GloVe 在单词相似度任务上的表现</figcaption></figure><ul><li>单词相似度：哪一个词和<u>爸爸</u>的意思最接近？<u>父亲</u>、母亲、爷爷、奶奶</li><li>GloVe 42B 比 Word2Vec 100B 效果还好</li></ul><h3 id="命名实体识别">命名实体识别</h3><figure><img src="/figures/glove_paper_notes/ner.png" style="width:50%" class="center"><figcaption>GloVe 在命名实体识别任务上的表现</figcaption></figure><ul><li>命名实体识别( NER )：识别出一句话内的人名、地点、组织等信息。<u>特朗普</u>是<u>美国</u>人</li><li>NER模型类似 FFN+CRF（序列标注模型），把词向量作为特征输入到 FFN，FFN 的输出作为 CRF 的发射概率</li><li>在下游任务上，GloVe的优势不明显</li></ul><h2 id="总结">总结</h2><p>GloVe 与 Word2Vec 是最流行的非 BERT 类词向量模型，我个人认为二者性能相似，具体用哪个可以先根据自己的任务测试一下。我不认同“GloVe 使用了全局信息因此比Word2Vec效果要好”的观点，GloVe 论文最后一节的推导了实际上说明 GloVe 与 Skip Gram 是等价的；我也不认同“GloVe 使用了共现概率比因此比Word2Vec效果要好” 的观点，在 GloVe 模型推导的中途为了满足对称性实际上抛弃掉了比的形式。由公式 <span class="math inline">\(\ref{7}\)</span> 直观的理解，GloVe实际上就是让<strong>共现次数多的两个词的词向量的内积大</strong>。不过我们可能凭空想不出来这个公式，因此作者前面给出了设计这个公式的思路。用计算语言学课上钱老师的话讲，“共现次数可能是比较大的值，因此加一个 <span class="math inline">\(\mathrm{log}\)</span> 函数让量纲变的一致”。</p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>embedding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LINUX常用命令</title>
    <link href="/linux_common_comands/"/>
    <url>/linux_common_comands/</url>
    
    <content type="html"><![CDATA[<p>LINUX常用命令记录，不用老去搜索啦！ <span id="more"></span></p><h2 id="指定gpu">指定GPU</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CUDA_VISIBLE_DEVICES=<br></code></pre></td></tr></table></figure><h2 id="根据进程号查询">根据进程号查询</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep <br>ps -ef | grep python <span class="hljs-comment"># 查询正在运行的python程序</span><br></code></pre></td></tr></table></figure><ul><li>ps 表示 process status 命令，查看系统的进程状态。-e 表示显示所有进程，-f 表示全格式。</li><li>| 表示管道符，把前一个命令的输出作为下一个命令的输入。</li><li>grep 表示 Globally search a Regular Expression and Print 命令。</li></ul><h2 id="批量删除指定后缀文件">批量删除指定后缀文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*.xml&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; \;<br></code></pre></td></tr></table></figure><h2 id="查看当前文件夹下各目录大小">查看当前文件夹下各目录大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -h --max-depth=1<br></code></pre></td></tr></table></figure><h2 id="无root权限安装软件">无root权限安装软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf software.tar.gz <span class="hljs-comment"># 解压.tar.gz到当前目录</span><br><span class="hljs-built_in">cd</span> software<br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">link</span> <span class="hljs-comment"># 新建一个文件夹用于存放安装的软件</span><br>./configure --prefix=/home/ymliu/local/software/link<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LINUX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RAT-SQL论文复现——bug总结与完整复现流程</title>
    <link href="/run_ratsql_model/"/>
    <url>/run_ratsql_model/</url>
    
    <content type="html"><![CDATA[<p>复现 ACL'20 论文：<a href="https://aclanthology.org/2020.acl-main.677/">RAT-SQL</a> 时遇到的 bug 总结以及自己的复现流程。 <span id="more"></span></p><p>首先尝试了docker之后遇到一堆坑，最后决定直接使用conda环境。需要知道root密码。环境：liunx，Ubuntu20.04，RTX3090。"/path/to/"表示该文件或目录的所在路径，比如"/path/to/rat-sql"，在具体路径"/home/ps/rat-sql"中，"/path/to/"等于"/home/ps/"。</p><h2 id="bug总结">1 BUG总结</h2><h3 id="valueerror-unsupported-kind-for-param-args-var_positional">1.1 ValueError: Unsupported kind for param args: VAR_POSITIONAL</h3><p>发生在preprocess时。原因在于pytorch版本过高或者python版本过高，可用如下命令安装pytorch <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pytorch==1.3.1 cudatoolkit=10.1<br></code></pre></td></tr></table></figure> preprocess阶段还有类似bug，都可用这个方法解决，请使用<strong>python 3.7</strong>。</p><h3 id="no-space-left-on-device">1.2 no space left on device</h3><p>发生在train时。微软给的代码中保存的模型检查点过多，非bert训练大约需要几十G，bert则需要几百G。 需要指定 --logdir 到足够大的硬盘中，或减少检查点数量。</p><h3 id="找不到__logdir__路径">1.3 找不到__LOGDIR__路径</h3><p>发生在eval时。在infer.py和eval.py中的__LOGDIR__都被替换为了实际的log路径,但是在run.py中，没有被替换，可以把run.py中104行开始的如下两行代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">res_json = json.load(<span class="hljs-built_in">open</span>(eval_output_path))<br><span class="hljs-built_in">print</span>(step, res_json[<span class="hljs-string">&#x27;total_scores&#x27;</span>][<span class="hljs-string">&#x27;all&#x27;</span>][<span class="hljs-string">&#x27;exact&#x27;</span>])<br></code></pre></td></tr></table></figure> 替换成如下代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">model_config = json.loads(_jsonnet.evaluate_file(<br>    eval_config.config,<br>    tla_codes=&#123;<span class="hljs-string">&#x27;args&#x27;</span>: eval_config.config_args&#125;))<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;model_name&#x27;</span> <span class="hljs-keyword">in</span> model_config:<br>    specific_logdir = os.path.join(logdir, model_config[<span class="hljs-string">&#x27;model_name&#x27;</span>])<br>    eval_output_path = eval_output_path.replace(<span class="hljs-string">&#x27;__LOGDIR__&#x27;</span>, specific_logdir)<br>    res_json = json.load(<span class="hljs-built_in">open</span>(eval_output_path))<br>    <span class="hljs-built_in">print</span>(step, res_json[<span class="hljs-string">&#x27;total_scores&#x27;</span>][<span class="hljs-string">&#x27;all&#x27;</span>][<span class="hljs-string">&#x27;exact&#x27;</span>])<br><span class="hljs-keyword">else</span>:<br>    specific_logdir = logdir<br>    eval_output_path = eval_output_path.replace(<span class="hljs-string">&#x27;__LOGDIR__&#x27;</span>, specific_logdir)<br>    res_json = json.load(<span class="hljs-built_in">open</span>(eval_output_path))<br>    <span class="hljs-built_in">print</span>(step, res_json[<span class="hljs-string">&#x27;total_scores&#x27;</span>])<br></code></pre></td></tr></table></figure></p><h3 id="assert-next_choices-is-not-none">1.4 assert next_choices is not None</h3><p>发生在eval wikisql时，需要把experiments/wikisql-glove-run.jsonnet中第12行的 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">eval_use_heuristic<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br></code></pre></td></tr></table></figure> 改为 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">eval_use_heuristic<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br></code></pre></td></tr></table></figure></p><h3 id="attributeerror-rmkeyview-object-has-no-attribute-index">1.5 AttributeError: 'RMKeyView' object has no attribute 'index'</h3><p>依旧发生在eval wikisql时，是records包本身的bug。找到path/to/anaconda3/envs/ratsql/lib/python3.7/site-packages/records.py(ratsql是conda环境名；python3.7是python版本) 找到第40行keys函数中 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> self._keys<br></code></pre></td></tr></table></figure> 改为 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(self._keys)<br></code></pre></td></tr></table></figure></p><h3 id="把自定义的包路径加入conda环境中">1.6 把自定义的包路径加入conda环境中</h3><p>遇到不能pip install或conda install的包时，比如third_party中的wikisql。用<em>PYTHONPATH=""</em>等方法加到当前终端(或类似方法加到linux当前用户，linux所有用户)感觉相当麻烦，我就想加到我的conda环境中，也不影响其他的项目也不影响别人。使用如下命令一行解决。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda develop /path/to/rat-sql/third_party/wikisql/<br></code></pre></td></tr></table></figure> 具体原理是在"/path/to/anaconda3/envs/ratsql/lib/python3.7/site-packages"(ratsql是conda环境名；python3.7是python版本)目录下生成一个conda.pth文件，conda环境会把conda.pth文件中的路径加到sys.path中，因此只在该conda环境中有效。</p><h2 id="复现流程">2 复现流程</h2><h3 id="安装linux包">2.1 安装linux包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /usr/share/man/man1 &amp;&amp; \<br>    apt-get update &amp;&amp; apt-get install -y \<br>    build-essential \<br>    cifs-utils \<br>    curl \<br>    default-jdk \<br>    dialog \<br>    dos2unix \<br>    git \<br>    sudo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="创建conda环境安装python包">2.2 创建conda环境，安装python包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n ratsql python=3.7<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate ratsql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install asdl==0.1.5<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install astor==0.7.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install attrs==18.2.0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install babel==2.7.0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install bpemb==0.2.11<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install cython==0.29.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install jsonnet==0.14.0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install networkx==2.2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install nltk==3.4<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pyrsistent==0.14.9<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pytest==5.3.2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install records==0.5.3<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install stanford-corenlp==3.9.2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tabulate==0.8.6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pytorch==1.3.1 cudatoolkit=10.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torchtext==0.3.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tqdm==4.36.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install transformers==2.3.0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install entmax<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install scikit-learn<br></code></pre></td></tr></table></figure><h3 id="下载nltk_data和bert">2.3 下载nltk_data和bert</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import nltk; nltk.download(&#x27;stopwords&#x27;); nltk.download(&#x27;punkt&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;from transformers import BertModel; BertModel.from_pretrained(&#x27;bert-large-uncased-whole-word-masking&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="下载stanford-corenlp和wikisql官方脚本">2.4 下载stanford-corenlp和wikisql官方脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p third_party &amp;&amp; \<br><span class="hljs-built_in">cd</span> third_party &amp;&amp; \<br>curl https://download.cs.stanford.edu/nlp/software/stanford-corenlp-full-2018-10-05.zip | jar xv &amp;&amp; \<br><span class="hljs-built_in">cd</span> .. &amp;&amp; \<br>git <span class="hljs-built_in">clone</span> https://github.com/salesforce/WikiSQL third_party/wikisql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>连不上github可以把<strong>https://</strong>换成<strong>git://</strong></p><h3 id="把下载下来并组织好的data参照rat-sql的readme复制到项目中">2.5 把下载下来并组织好的data(参照rat-sql的<a href="https://github.com/Microsoft/rat-sql">readme</a>)复制到项目中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p data &amp;&amp; \<br><span class="hljs-built_in">cd</span> data &amp;&amp; \<br><span class="hljs-built_in">cp</span> -r /path/to/data ./ &amp;&amp; \<br><span class="hljs-built_in">cd</span> ..<br></code></pre></td></tr></table></figure><h3 id="将所有-shell-脚本转换为-unix-行尾">2.6 将所有 shell 脚本转换为 Unix 行尾</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&#x27;if compgen -G &quot;/path/to/rat-sql/**/*.sh&quot; &gt; /dev/null; then dos2unix /app/**/*.sh; fi&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="把wikisql官方脚本加到conda环境">2.7 把wikisql官方脚本加到conda环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda develop /path/to/rat-sql/third_party/wikisql<br></code></pre></td></tr></table></figure><h2 id="运行">3 运行</h2><h3 id="运行命令">3.1 运行命令</h3><h4 id="spider-glove">3.1.1 spider-glove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py preprocess experiments/spider-glove-run.jsonnet<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py train experiments/spider-glove-run.jsonnet<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py <span class="hljs-built_in">eval</span> experiments/spider-glove-run.jsonnet<br></code></pre></td></tr></table></figure><h4 id="spider-bert">3.1.2 spider-bert</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py preprocess experiments/spider-bert-run.jsonnet<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py train experiments/spider-bert-run.jsonnet<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py <span class="hljs-built_in">eval</span> experiments/spider-bert-run.jsonnet<br></code></pre></td></tr></table></figure><h4 id="wikisql-glove">3.1.3 wikisql-glove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py preprocess experiments/wikisql-glove-run.jsonnet<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py train experiments/wikisql-glove-run.jsonnet<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py <span class="hljs-built_in">eval</span> experiments/wikisql-glove-run.jsonnet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>text2sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>screen 命令——linux 服务器后台运行</title>
    <link href="/linux_screen_command/"/>
    <url>/linux_screen_command/</url>
    
    <content type="html"><![CDATA[<p>关于 screen 命令用法的总结 <span id="more"></span></p><p>在用服务器跑深度学习模型的时候，往往需要用到后台运行，否则一断开终端程序就终止了。使用 screen 管理会话，不仅可以临时断开一个会话，让程序在后台继续运行。也可以在一个窗口管理多个会话，非常方便。今天来记录一下常用命令及操作，方便忘记时查阅。</p><h2 id="创建screen会话">创建screen会话</h2><p>使用如下命令创建screen会话，其中"my_screen"可以换成自己定义的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S my_screen<br></code></pre></td></tr></table></figure><h2 id="查看当前有哪些会话">查看当前有哪些会话</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h2 id="进入自己的会话">进入自己的会话</h2><p>使用如下命令进入自己的 screen 会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -r my_screen<br></code></pre></td></tr></table></figure><p>在这个会话中就可以开始跑自己的模型啦！如果想在后台跑就可以按 <strong>Ctrl+A+D</strong> 就可以退出自己的会话，然后可以关闭终端。或者也可以在当前会话中进行一些操作，比如使用 nvidia-smi 查看显存占用情况。下次再打开的时候可以继续用上面的命令查看会话和打开会话。</p><h2 id="如何在screen窗口中翻页">如何在screen窗口中翻页</h2><p>重新进入会话后好像不能翻页，在自己的会话中按住 <strong>Ctrl+A</strong> 然后松手按 <strong>[</strong> 就可以进入 copy mode (必须为英文输入法)，这时候可以用 <strong>PgUp</strong> (小键盘"上"方向键)、<strong>PgDn</strong> (小键盘"下"方向键)来翻页。按 <strong>Ctrl+C</strong> 退出 copy mode。</p><h2 id="删除会话">删除会话</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S my_screen -X quit<br></code></pre></td></tr></table></figure><h2 id="一些补充">一些补充</h2><p>如果在自己的screen会话中突然断网，再次启动启动SSH会话时不会看到自己的 screen 窗口，并且进入会话会报错，可以使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -d my_screen<br></code></pre></td></tr></table></figure><p>先退出会话再用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -r my_screen<br></code></pre></td></tr></table></figure><p>进入会话就可以了。</p><h2 id="总结">总结</h2><p>以上就是常用的 screen 命令及操作，足以用于深度学习做实验。</p>]]></content>
    
    
    <categories>
      
      <category>LINUX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
